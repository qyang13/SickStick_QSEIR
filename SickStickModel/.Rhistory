QE <- 6
QI <- 7
current_pop <- matrix(0L, nrow = 2, ncol = N)
rownames(current_pop) <- c("state", "num days in state")
total_pop <- matrix(0L, nrow = T_max, ncol = 7)
colnames(total_pop) <- c("S", "E", "I", "R", "QS", "QE", "QI")
# Set initial population in current_pop and total_pop
# KMB: 1% in I0 and 1% in E0, may need to change later
E0 <- round(N/100)
I0 <- round(N/100)
current_pop[1, 1:E0] <- E
current_pop[1, (E0+1):(E0+I0)] <- I
current_pop[1, -(1:(E0+I0))] <- S
count_states <- table(current_pop[1,])
total_pop[t, S] <- count_states["1"]
total_pop[t, E] <- count_states["2"]
total_pop[t, I] <- count_states["3"]
#### KMB: Implement "Serve time" later ####
#if (ST==0) {mu <- 0} # else {mu <- 1/ST}
#else {mu <- 0}
# KMB: Implement "Strategy" later
#if (Stg == 1) {
#  Fq <- 0
#  Fr <- 1
#}
#### Simulation loop ####
t=2
while (total_pop[t, S]!=0) {
t=t+1
# SickStick Phase: ####
# first compute individuals who move with bernoulli distribution, then update compartments accordingly
num_to_QI = 0
if (SickStick == TRUE) {
for (i in 1:N){
if (current_pop[1,i] == S) {
move <- rbern(1, FP)
if (move == 1) current_pop[1,i] = QS
}
else if (current_pop[1,i] == E) {
move <- rbern(1, TP)
if (move == 1) current_pop[1,i] = QE
}
else if (current_pop[1,i] == I) {
move <- rbern(1, TP)
if (move == 1) {
current_pop[1,i] = QI
num_to_QI = num_to_QI + 1
}
}
else if (current_pop[1,i] == QS) {
move <- rbern(1, TP)
if (move == 1) current_pop[1,i] = S
}
else if (current_pop[1,i] == QE) {
move <- rbern(1, FP)
if (move == 1) current_pop[1,i] = E
}
}
}
# Normal Disease Dynamics ###
# first compute if individual moves compartments, then move and update num days in compartment
# then compute overall number of people in each compartment
for (i in 1:N){
if (current_pop[1,i] == S){
rate <- 1 - (1 - beta)^(total_pop[t-1, I] - num_to_QI) # I needs to be current_pop - sickstick quarantine
move <- rbern(1, rate)
if (move == 1){
current_pop[1,i] = E
current_pop[2,i] = 1
}
}
else if (current_pop[1,i] == E){
prob_success <- pnorm(current_pop[2,i], T_incubate, 1) #TODO: update sd based on certain disease
move <- rbern(1, prob_success)
if (move == 1){
current_pop[1,i] = I
current_pop[2,i] = 1
} else current_pop[2,i] = current_pop[2,i] + 1
}
else if (current_pop[1,i] == I){
# first self-quarantine. Then recovery rate.
move <- rbern(1, r_Q)
if (move == 1){
current_pop[1,i] = QI
current_pop[2,i] = current_pop[2,i] + 1
} else {
prob_success <- pnorm(current_pop[2,i], T_recover, 1) #TODO: update sd based on certain disease
move <- rbern(1, prob_success)
if (move == 1){
current_pop[1,i] = R
current_pop[2,i] = 1
} else current_pop[2,i] = current_pop[2,i] + 1
}
}
else if (current_pop[1,i] == QE){
prob_success <- pnorm(current_pop[2,i], T_incubate, 1) #TODO: update sd based on certain disease
move <- rbern(1, prob_success)
if (move == 1){
current_pop[1,i] = QI
current_pop[2,i] = 1
} else current_pop[2,i] = current_pop[2,i] + 1
}
else if (current_pop[1,i] == QI){
prob_success <- pnorm(current_pop[2,i], T_recover, 1) #TODO: update sd based on certain disease
move <- rbern(1, prob_success)
if (move == 1){
current_pop[1,i] = R
current_pop[2,i] = 1
} else current_pop[2,i] = current_pop[2,i] + 1
}
}
count_states <- table(current_pop[1,])
total_pop[t, S] <- count_states["1"]
total_pop[t, E] <- count_states["2"]
total_pop[t, I] <- count_states["3"]
total_pop[t, R] <- count_states["4"]
total_pop[t, QS] <- count_states["5"]
total_pop[t, QE] <- count_states["6"]
total_pop[t, QI] <- count_states["7"]
total_pop[t, is.na(total_pop[t,])] <- 0
}
}
testRun <- function(
T_max, # Total time (days)
N, # total number of people
SickStick, # If using sickstick (TRUE or FALSE)
TP, # TP of SickStick
TN, # TN of SickStick
R0, # r0 value for disease of interest
# beta, # Transmission rate (contact rate * probability of transmission given contact)
gamma, # Recovery rate
sigma, # incubation rate
r_Q, # Sympotom-based self quarantine rate
r_RS # Reverse rate R - S, can also be considered as disease reocurrence rate
# KMB 1/31: ignoring this params for now
# T_Q = 1, # Number of days remained quarantined before clear
# Stg = 1, # Strategy
# Fq = 1, # Every # of days
# Fr = 1, # Percentage of population (%) to use
# ST = 10 # Serve time (in months)
){
#### Initialization ####
# Initialize variables
TP <- TP/100
TN <- TN/100
FN <- 1 - TP
FP <- 1 - TN
T_recover <- 1/gamma
T_incubate <- 1/sigma
beta = R0*gamma
t = 1
S <- 1
E <- 2
I <- 3
R <- 4
QS <- 5
QE <- 6
QI <- 7
current_pop <- matrix(0L, nrow = 2, ncol = N)
rownames(current_pop) <- c("state", "num days in state")
total_pop <- matrix(0L, nrow = T_max, ncol = 7)
colnames(total_pop) <- c("S", "E", "I", "R", "QS", "QE", "QI")
# Set initial population in current_pop and total_pop
# KMB: 1% in I0 and 1% in E0, may need to change later
E0 <- round(N/100)
I0 <- round(N/100)
current_pop[1, 1:E0] <- E
current_pop[1, (E0+1):(E0+I0)] <- I
current_pop[1, -(1:(E0+I0))] <- S
count_states <- table(current_pop[1,])
total_pop[t, S] <- count_states["1"]
total_pop[t, E] <- count_states["2"]
total_pop[t, I] <- count_states["3"]
#### KMB: Implement "Serve time" later ####
#if (ST==0) {mu <- 0} # else {mu <- 1/ST}
#else {mu <- 0}
# KMB: Implement "Strategy" later
#if (Stg == 1) {
#  Fq <- 0
#  Fr <- 1
#}
#### Simulation loop ####
t=2
while (total_pop[t, S]!=0) {
t=t+1
# SickStick Phase: ####
# first compute individuals who move with bernoulli distribution, then update compartments accordingly
num_to_QI = 0
if (SickStick == TRUE) {
for (i in 1:N){
if (current_pop[1,i] == S) {
move <- rbern(1, FP)
if (move == 1) current_pop[1,i] = QS
}
else if (current_pop[1,i] == E) {
move <- rbern(1, TP)
if (move == 1) current_pop[1,i] = QE
}
else if (current_pop[1,i] == I) {
move <- rbern(1, TP)
if (move == 1) {
current_pop[1,i] = QI
num_to_QI = num_to_QI + 1
}
}
else if (current_pop[1,i] == QS) {
move <- rbern(1, TP)
if (move == 1) current_pop[1,i] = S
}
else if (current_pop[1,i] == QE) {
move <- rbern(1, FP)
if (move == 1) current_pop[1,i] = E
}
}
}
# Normal Disease Dynamics ###
# first compute if individual moves compartments, then move and update num days in compartment
# then compute overall number of people in each compartment
for (i in 1:N){
if (current_pop[1,i] == S){
rate <- 1 - (1 - beta)^(total_pop[t-1, I] - num_to_QI) # I needs to be current_pop - sickstick quarantine
move <- rbern(1, rate)
if (move == 1){
current_pop[1,i] = E
current_pop[2,i] = 1
}
}
else if (current_pop[1,i] == E){
prob_success <- pnorm(current_pop[2,i], T_incubate, 1) #TODO: update sd based on certain disease
move <- rbern(1, prob_success)
if (move == 1){
current_pop[1,i] = I
current_pop[2,i] = 1
} else current_pop[2,i] = current_pop[2,i] + 1
}
else if (current_pop[1,i] == I){
# first self-quarantine. Then recovery rate.
move <- rbern(1, r_Q)
if (move == 1){
current_pop[1,i] = QI
current_pop[2,i] = current_pop[2,i] + 1
} else {
prob_success <- pnorm(current_pop[2,i], T_recover, 1) #TODO: update sd based on certain disease
move <- rbern(1, prob_success)
if (move == 1){
current_pop[1,i] = R
current_pop[2,i] = 1
} else current_pop[2,i] = current_pop[2,i] + 1
}
}
else if (current_pop[1,i] == QE){
prob_success <- pnorm(current_pop[2,i], T_incubate, 1) #TODO: update sd based on certain disease
move <- rbern(1, prob_success)
if (move == 1){
current_pop[1,i] = QI
current_pop[2,i] = 1
} else current_pop[2,i] = current_pop[2,i] + 1
}
else if (current_pop[1,i] == QI){
prob_success <- pnorm(current_pop[2,i], T_recover, 1) #TODO: update sd based on certain disease
move <- rbern(1, prob_success)
if (move == 1){
current_pop[1,i] = R
current_pop[2,i] = 1
} else current_pop[2,i] = current_pop[2,i] + 1
}
}
count_states <- table(current_pop[1,])
total_pop[t, S] <- count_states["1"]
total_pop[t, E] <- count_states["2"]
total_pop[t, I] <- count_states["3"]
total_pop[t, R] <- count_states["4"]
total_pop[t, QS] <- count_states["5"]
total_pop[t, QE] <- count_states["6"]
total_pop[t, QI] <- count_states["7"]
total_pop[t, is.na(total_pop[t,])] <- 0
}
return(t)
}
T_max = 90
N = 100
SickStick = FALSE
TP = 75
FP = 75
Ro = 2.5 # r0 value for disease of interest
gamma = 1/8 # Recovery rate
sigma = 1/2 # incubation rate
r_Q = 0.05 # Sympotom-based self quarantine rate
r_RS = 0.05 # Reverse rate R - S, can also be considered as disease reocurrence rate
sd_nm=testRun(
T_max, # Total time (days)
N, # total number of people
FALSE, # If using sickstick (TRUE or FALSE)
TP, # TP of SickStick
TN, # TN of SickStick
Ro, # r0 value for disease of interest
gamma, # Recovery rate
sigma, # incubation rate
r_Q, # Sympotom-based self quarantine rate
r_RS # Reverse rate R - S, can also be considered as disease reocurrence rate
)
T_max = 90
N = 100
SickStick = FALSE
TP = 75
TN = 75
Ro = 2.5 # r0 value for disease of interest
gamma = 1/8 # Recovery rate
sigma = 1/2 # incubation rate
r_Q = 0.05 # Sympotom-based self quarantine rate
r_RS = 0.05 # Reverse rate R - S, can also be considered as disease reocurrence rate
sd_nm=testRun(
T_max, # Total time (days)
N, # total number of people
FALSE, # If using sickstick (TRUE or FALSE)
TP, # TP of SickStick
TN, # TN of SickStick
Ro, # r0 value for disease of interest
gamma, # Recovery rate
sigma, # incubation rate
r_Q, # Sympotom-based self quarantine rate
r_RS # Reverse rate R - S, can also be considered as disease reocurrence rate
)
# Define, unit time as days
testRun <- function(
T_max, # Total time (days)
N, # total number of people
SickStick, # If using sickstick (TRUE or FALSE)
TP, # TP of SickStick
TN, # TN of SickStick
R0, # r0 value for disease of interest
# beta, # Transmission rate (contact rate * probability of transmission given contact)
gamma, # Recovery rate
sigma, # incubation rate
r_Q, # Sympotom-based self quarantine rate
r_RS # Reverse rate R - S, can also be considered as disease reocurrence rate
# KMB 1/31: ignoring this params for now
# T_Q = 1, # Number of days remained quarantined before clear
# Stg = 1, # Strategy
# Fq = 1, # Every # of days
# Fr = 1, # Percentage of population (%) to use
# ST = 10 # Serve time (in months)
){
#### Initialization ####
# Initialize variables
TP <- TP/100
TN <- TN/100
FN <- 1 - TP
FP <- 1 - TN
T_recover <- 1/gamma
T_incubate <- 1/sigma
beta = R0*gamma
t = 1
S <- 1
E <- 2
I <- 3
R <- 4
QS <- 5
QE <- 6
QI <- 7
current_pop <- matrix(0L, nrow = 2, ncol = N)
rownames(current_pop) <- c("state", "num days in state")
total_pop <- matrix(0L, nrow = T_max, ncol = 7)
colnames(total_pop) <- c("S", "E", "I", "R", "QS", "QE", "QI")
# Set initial population in current_pop and total_pop
# KMB: 1% in I0 and 1% in E0, may need to change later
E0 <- round(N/100)
I0 <- round(N/100)
current_pop[1, 1:E0] <- E
current_pop[1, (E0+1):(E0+I0)] <- I
current_pop[1, -(1:(E0+I0))] <- S
count_states <- table(current_pop[1,])
total_pop[t, S] <- count_states["1"]
total_pop[t, E] <- count_states["2"]
total_pop[t, I] <- count_states["3"]
#### KMB: Implement "Serve time" later ####
#if (ST==0) {mu <- 0} # else {mu <- 1/ST}
#else {mu <- 0}
# KMB: Implement "Strategy" later
#if (Stg == 1) {
#  Fq <- 0
#  Fr <- 1
#}
#### Simulation loop ####
t=2
while (total_pop[t, R]!=N) {
t=t+1
# SickStick Phase: ####
# first compute individuals who move with bernoulli distribution, then update compartments accordingly
num_to_QI = 0
if (SickStick == TRUE) {
for (i in 1:N){
if (current_pop[1,i] == S) {
move <- rbern(1, FP)
if (move == 1) current_pop[1,i] = QS
}
else if (current_pop[1,i] == E) {
move <- rbern(1, TP)
if (move == 1) current_pop[1,i] = QE
}
else if (current_pop[1,i] == I) {
move <- rbern(1, TP)
if (move == 1) {
current_pop[1,i] = QI
num_to_QI = num_to_QI + 1
}
}
else if (current_pop[1,i] == QS) {
move <- rbern(1, TP)
if (move == 1) current_pop[1,i] = S
}
else if (current_pop[1,i] == QE) {
move <- rbern(1, FP)
if (move == 1) current_pop[1,i] = E
}
}
}
# Normal Disease Dynamics ###
# first compute if individual moves compartments, then move and update num days in compartment
# then compute overall number of people in each compartment
for (i in 1:N){
if (current_pop[1,i] == S){
rate <- 1 - (1 - beta)^(total_pop[t-1, I] - num_to_QI) # I needs to be current_pop - sickstick quarantine
move <- rbern(1, rate)
if (move == 1){
current_pop[1,i] = E
current_pop[2,i] = 1
}
}
else if (current_pop[1,i] == E){
prob_success <- pnorm(current_pop[2,i], T_incubate, 1) #TODO: update sd based on certain disease
move <- rbern(1, prob_success)
if (move == 1){
current_pop[1,i] = I
current_pop[2,i] = 1
} else current_pop[2,i] = current_pop[2,i] + 1
}
else if (current_pop[1,i] == I){
# first self-quarantine. Then recovery rate.
move <- rbern(1, r_Q)
if (move == 1){
current_pop[1,i] = QI
current_pop[2,i] = current_pop[2,i] + 1
} else {
prob_success <- pnorm(current_pop[2,i], T_recover, 1) #TODO: update sd based on certain disease
move <- rbern(1, prob_success)
if (move == 1){
current_pop[1,i] = R
current_pop[2,i] = 1
} else current_pop[2,i] = current_pop[2,i] + 1
}
}
else if (current_pop[1,i] == QE){
prob_success <- pnorm(current_pop[2,i], T_incubate, 1) #TODO: update sd based on certain disease
move <- rbern(1, prob_success)
if (move == 1){
current_pop[1,i] = QI
current_pop[2,i] = 1
} else current_pop[2,i] = current_pop[2,i] + 1
}
else if (current_pop[1,i] == QI){
prob_success <- pnorm(current_pop[2,i], T_recover, 1) #TODO: update sd based on certain disease
move <- rbern(1, prob_success)
if (move == 1){
current_pop[1,i] = R
current_pop[2,i] = 1
} else current_pop[2,i] = current_pop[2,i] + 1
}
}
count_states <- table(current_pop[1,])
total_pop[t, S] <- count_states["1"]
total_pop[t, E] <- count_states["2"]
total_pop[t, I] <- count_states["3"]
total_pop[t, R] <- count_states["4"]
total_pop[t, QS] <- count_states["5"]
total_pop[t, QE] <- count_states["6"]
total_pop[t, QI] <- count_states["7"]
total_pop[t, is.na(total_pop[t,])] <- 0
}
return(t)
}
T_max = 90
N = 100
SickStick = FALSE
TP = 75
TN = 75
Ro = 2.5 # r0 value for disease of interest
gamma = 1/8 # Recovery rate
sigma = 1/2 # incubation rate
r_Q = 0.05 # Sympotom-based self quarantine rate
r_RS = 0.05 # Reverse rate R - S, can also be considered as disease reocurrence rate
sd_nm=testRun(
T_max, # Total time (days)
N, # total number of people
FALSE, # If using sickstick (TRUE or FALSE)
TP, # TP of SickStick
TN, # TN of SickStick
Ro, # r0 value for disease of interest
gamma, # Recovery rate
sigma, # incubation rate
r_Q, # Sympotom-based self quarantine rate
r_RS # Reverse rate R - S, can also be considered as disease reocurrence rate
)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
