plot=data.frame(gene,fc, id)
ggplot(plot, aes(x = gene, y = log10(fc), fill=gene)) +
geom_boxplot() +
geom_point(aes(shape=id), size=4, alpha=0.5, position = position_jitterdodge()) +
ylim(c(0, 2))
dat_nm_select = dat_nm[dat_nm$Row.names%in%select_ctrl,]
dat_nm = merge(dat_norm, foo, by.x="row.names", by.y="refseq_mrna")
View(dat_nm)
dat_nm_select = dat_nm[dat_nm$Row.names%in%select_biom,]
View(dat_nm_select)
gene=rep(dat_nm_select$external_gene_name,5)
fc=c(dat_nm_select$MM1,
dat_nm_select$MM2,
dat_nm_select$MM3,
dat_nm_select$MM4,
dat_nm_select$MM5)
id=rep(paste("MM",1:5), each=5)
plot=data.frame(gene,fc, id)
ggplot(plot, aes(x = gene, y = log10(fc), fill=gene)) +
geom_boxplot() +
geom_point(aes(shape=id), size=4, alpha=0.5, position = position_jitterdodge()) +
ylim(c(0, 2))
ggplot(plot, aes(x = gene, y = log10(fc), fill=gene)) +
geom_boxplot() +
geom_point(aes(shape=id), size=4, alpha=0.5, position = position_jitterdodge()) +
ylim(c(0, 5))
ggplot(plot, aes(x = gene, y = log10(fc), fill=gene)) +
xlab(c('Cxcl10',dat_nm_select$external_gene_name[,2:5]))
ggplot(plot, aes(x = gene, y = log10(fc), fill=gene)) +
xlab(c('Cxcl10',dat_nm_select$external_gene_name[2:5]))
ggplot(plot, aes(x = gene, y = log10(fc), fill=gene)) +
xlab(c('Cxcl8',dat_nm_select$external_gene_name[2:5]))+
geom_boxplot() +
geom_point(aes(shape=id), size=4, alpha=0.5, position = position_jitterdodge()) +
ylim(c(0, 5))
dat_nm_select[3,7]='Cxcl8'
gene=rep(dat_nm_select$external_gene_name,5)
fc=c(dat_nm_select$MM1,
dat_nm_select$MM2,
dat_nm_select$MM3,
dat_nm_select$MM4,
dat_nm_select$MM5)
id=rep(paste("MM",1:5), each=5)
plot=data.frame(gene,fc, id)
ggplot(plot, aes(x = gene, y = log10(fc), fill=gene)) +
geom_boxplot() +
geom_point(aes(shape=id), size=4, alpha=0.5, position = position_jitterdodge()) +
ylim(c(0, 5))
data=dds_pbmc
data=data.frame(counts(data, normalized=T))
rownames(data)=gsub("\\..*","",rownames(data))
data=merge(data, conversion, by.x='row.names', by.y='V1', all.x=T )
slect_biom=c('NM_001547', 'NM_000584', 'NM_000201', 'NM_022168', 'NM_014314')
data_select = data[data$Row.names%in%slect_biom,]
data_select = data_select[,-6]
gene=rep(data_select$V2,(ncol(data_select)-2))
fc=c(as.matrix(data_select[,2:(ncol(data_select)-1)]))
id=rep(colnames(data_select[,2:(ncol(data_select)-1)]), each=5)
plot=data.frame(gene,fc, id)
ggplot(plot, aes(x = gene, y = (fc))) +
geom_boxplot() +
geom_point(aes(color=id), size=4, alpha=0.5)
ggplot(plot, aes(x = gene, y = log10(fc))) +
geom_boxplot() +
geom_point(aes(color=id), size=4, alpha=0.5)
ggplot(plot, aes(x = gene, y = log10(fc))) +
geom_boxplot() +
geom_point(aes(color=id), size=4, alpha=0.5) +
ylim(c(0,5))
data=dds_ws
data=data.frame(counts(data, normalized=T))
rownames(data)=gsub("\\..*","",rownames(data))
data=merge(data, conversion, by.x='row.names', by.y='V1', all.x=T )
slect_biom=c('NM_001547', 'NM_000584', 'NM_000201', 'NM_022168', 'NM_014314')
data_select = data[data$Row.names%in%slect_biom,]
gene=rep(data_select$V2,(ncol(data_select)-2))
fc=c(as.matrix(data_select[,2:(ncol(data_select)-1)]))
id=rep(colnames(data_select[,2:(ncol(data_select)-1)]), each=5)
plot=data.frame(gene,fc, id)
ggplot(plot, aes(x = gene, y = log10(fc))) +
geom_boxplot() +
geom_point(aes(color=id), size=4, alpha=0.5) +
ylim(c(0,5))
data=dds_ws
data=data.frame(counts(data, normalized=T))
rownames(data)=gsub("\\..*","",rownames(data))
data=merge(data, conversion, by.x='row.names', by.y='V1', all.x=T )
select_ctrl=c('NM_004343', 'NM_001961', 'NM_003750', 'NM_003299', 'NM_005381')
data_select = data[data$Row.names%in%slect_biom,]
data_select = data_select[,-6]
gene=rep(data_select$V2,(ncol(data_select)-2))
fc=c(as.matrix(data_select[,2:(ncol(data_select)-1)]))
id=rep(colnames(data_select[,2:(ncol(data_select)-1)]), each=5)
plot=data.frame(gene,fc, id)
ggplot(plot, aes(x = gene, y = log10(fc))) +
geom_boxplot() +
geom_point(aes(color=id), size=4, alpha=0.5) +
ylim(c(0,5))
data=dds_ws
data=data.frame(counts(data, normalized=T))
rownames(data)=gsub("\\..*","",rownames(data))
data=merge(data, conversion, by.x='row.names', by.y='V1', all.x=T )
select_ctrl=c('NM_004343', 'NM_001961', 'NM_003750', 'NM_003299', 'NM_005381')
data_select = data[data$Row.names%in%slect_biom,]
data=dds_ws
data=data.frame(counts(data, normalized=T))
rownames(data)=gsub("\\..*","",rownames(data))
data=merge(data, conversion, by.x='row.names', by.y='V1', all.x=T )
select_ctrl=c('NM_004343', 'NM_001961', 'NM_003750', 'NM_003299', 'NM_005381')
slect_biom=c('NM_001547', 'NM_000584', 'NM_000201', 'NM_022168', 'NM_014314')
data_select = data[data$Row.names%in%select_ctrl,]
#data_select = data_select[,-6]
#data_select[,2:(ncol(data_select)-1)]=data_select[,2:(ncol(data_select)-1)]/rowMeans(data_select[,2:(ncol(data_select)-1)])
gene=rep(data_select$V2,(ncol(data_select)-2))
fc=c(as.matrix(data_select[,2:(ncol(data_select)-1)]))
id=rep(colnames(data_select[,2:(ncol(data_select)-1)]), each=5)
plot=data.frame(gene,fc, id)
ggplot(plot, aes(x = gene, y = log10(fc))) +
geom_boxplot() +
geom_point(aes(color=id), size=4, alpha=0.5) +
ylim(c(0,5))
data=dds_pbmc
data=data.frame(counts(data, normalized=T))
rownames(data)=gsub("\\..*","",rownames(data))
data=merge(data, conversion, by.x='row.names', by.y='V1', all.x=T )
select_ctrl=c('NM_004343', 'NM_001961', 'NM_003750', 'NM_003299', 'NM_005381')
data_select = data[data$Row.names%in%select_ctrl,]
data_select = data_select[,-6]
gene=rep(data_select$V2,(ncol(data_select)-2))
fc=c(as.matrix(data_select[,2:(ncol(data_select)-1)]))
id=rep(colnames(data_select[,2:(ncol(data_select)-1)]), each=5)
plot=data.frame(gene,fc, id)
ggplot(plot, aes(x = gene, y = log10(fc))) +
geom_boxplot() +
geom_point(aes(color=id), size=4, alpha=0.5) +
ylim(c(0,5))
select_ctrl=c('NM_011631', 'NM_007591', 'NM_010880', 'NM_007907', 'NM_010123')
dat_nm_select = dat_nm[dat_nm$Row.names%in%select_ctrl,]
gene=rep(dat_nm_select$external_gene_name,5)
fc=c(dat_nm_select$MM1,
dat_nm_select$MM2,
dat_nm_select$MM3,
dat_nm_select$MM4,
dat_nm_select$MM5)
id=rep(paste("MM",1:5), each=5)
plot=data.frame(gene,fc, id)
ggplot(plot, aes(x = gene, y = log10(fc), fill=gene)) +
geom_boxplot() +
geom_point(aes(shape=id), size=4, alpha=0.5, position = position_jitterdodge()) +
ylim(c(0, 5))
View(cts)
setwd("~/Documents/kinetics_mice/")
dat <- read.table("mm_counts.txt", header = T)
rownames(dat) <- dat[,1]
dat =dat[,7:11]
colnames(dat)=c("MM1","MM2","MM3","MM4","MM5")
condition=c('test','control','control','control','test')
View(dat)
rownames(dat)=gsub("\\..*","",rownames(dat))
dat["NM_009653",]
dat["NM_001102446",]
dat["NM_007907",]
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shinyWidgets::shinyWidgetsGallery()
runApp()
shinyWidgets::shinyWidgetsGallery()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
########################################################
# Defualt parameter seting
T_max = 90
N = 100
SickStick = FALSE
TP = 75
FP = 75
R0 = 2.5 # r0 value for disease of interest
gamma = 1/8 # Recovery rate
sigma = 1/2 # incubation rate
r_Q = 0.05 # Sympotom-based self quarantine rate
r_RS = 0.05 # Reverse rate R - S, can also be considered as disease reocurrence rate
# Changing Ro
########################################################
sickday_ro=data.frame()
for (TP in c(75, 85, 95)){
# Currently Setting TN=TP
TN = TP
for (Ro in seq(0, 20)*0.15) {
sd_nm=runMean(
T_max, # Total time (days)
N, # total number of people
FALSE, # If using sickstick (TRUE or FALSE)
TP, # TP of SickStick
TN, # TN of SickStick
Ro, # r0 value for disease of interest
gamma, # Recovery rate
sigma, # incubation rate
r_Q, # Sympotom-based self quarantine rate
r_RS # Reverse rate R - S, can also be considered as disease reocurrence rate
)
sd_ss=runMean(
T_max, # Total time (days)
N, # total number of people
TRUE, # If using sickstick (TRUE or FALSE)
TP, # TP of SickStick
TN, # TN of SickStick
Ro, # r0 value for disease of interest
gamma, # Recovery rate
sigma, # incubation rate
r_Q, # Sympotom-based self quarantine rate
r_RS # Reverse rate R - S, can also be considered as disease reocurrence rate
)
sd_saved=((sum(sd_nm[,3]+sd_nm[,8])) - (sum(sd_ss[,3]+sd_ss[,8])))/N
sd_saved_CI=sqrt((sum(sqrt(sd_nm[,11]^2+sd_nm[,16]^2))/T_max)^2 + (sum(sqrt(sd_ss[,11]^2+sd_ss[,16]^2))/T_max)^2)
sickday_ro <- rbind(sickday_ro, c(Ro,sd_saved,sd_saved_CI))
print(c('Current Ro: ',Ro, 'Current TP: ', TP))
}}
runApp()
ro_sickd = sickday_ro
num_sim = 21
indicator <- c(rep("TP = 75%", num_sim ), rep("TP = 85%", num_sim ), rep("TP = 95%", num_sim ))
ro_sickd <- data.frame(ro_sickd, Legend=indicator)
colnames(ro_sickd)=c('Ro', 'Saved', 'CI', 'Legend')
p_Ro <-  ggplot(ro_sickd,
aes(x=Ro, y=Saved, group=Legend)) +
geom_ribbon(aes(ymin=(Saved-CI), ymax=(Saved+CI)), alpha=0.2, fill='#657b83')+
ggtitle("") +
geom_line(aes(colour = Legend), size=2) +
labs(x = "Ro Value", y = "Total Sick Days Saved (w/ - wo/) per Person") +
geom_hline(yintercept=0, color="grey", linetype="dashed") +
theme_solarized_2(light=FALSE) +
scale_colour_solarized('blue')
print(p_Ro)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.library("flexdashboard")
install.packages("flexdashboard")
library(flexdashboard)
?gauge
runApp()
?valueBox
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
?gaugeOutput
?gauge
?renderGauge
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?gauge
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
library(rsconnect)
rsconnect::deployApp('~/Documents/SickStick_QSEIR/SickStickModel/')
runApp()
runApp()
runApp()
runApp()
rsconnect::deployApp('~/Documents/SickStick_QSEIR/SickStickModel/')
?dashboardPage
shinyWidgetsGallery()
runApp()
runApp()
runApp()
runApp()
runApp()
rsconnect::deployApp('~/Documents/SickStick_QSEIR/SickStickModel/')
rsconnect::deployApp('~/Documents/SickStick_QSEIR/SickStickModel/')
rsconnect::deployApp('~/Documents/SickStick_QSEIR/SickStickModel/')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
rsconnect::deployApp('~/Documents/SickStick_QSEIR/SickStickModel/')
rsconnect::deployApp('~/Documents/SickStick_QSEIR/SickStickModel/')
rsconnect::deployApp('~/Documents/SickStick_QSEIR/SickStickModel/')
rsconnect::deployApp('~/Documents/SickStick_QSEIR/SickStickModel/')
rsconnect::deployApp('~/Documents/SickStick_QSEIR/SickStickModel/')
runApp()
runApp()
runApp()
library(ggplot2)
source("helpers.R")
########################################################
# Defualt parameter seting
T_max = 90
N = 100
SickStick = FALSE
TP = 75
FP = 75
R0 = 2.5 # r0 value for disease of interest
gamma = 1/8 # Recovery rate
sigma = 1/2 # incubation rate
r_Q = 0.05 # Sympotom-based self quarantine rate
r_RS = 0.05 # Reverse rate R - S, can also be considered as disease reocurrence rate
# Changing Ro
########################################################
sickday_ro=data.frame()
for (TP in c(75, 85, 95)){
# Currently Setting TN=TP
TN = TP
for (Ro in seq(0, 20)*0.15+0.01) {
sd_nm=runMean(
T_max, # Total time (days)
N, # total number of people
FALSE, # If using sickstick (TRUE or FALSE)
TP, # TP of SickStick
TN, # TN of SickStick
Ro, # r0 value for disease of interest
gamma, # Recovery rate
sigma, # incubation rate
r_Q, # Sympotom-based self quarantine rate
r_RS # Reverse rate R - S, can also be considered as disease reocurrence rate
)
sd_ss=runMean(
T_max, # Total time (days)
N, # total number of people
TRUE, # If using sickstick (TRUE or FALSE)
TP, # TP of SickStick
TN, # TN of SickStick
Ro, # r0 value for disease of interest
gamma, # Recovery rate
sigma, # incubation rate
r_Q, # Sympotom-based self quarantine rate
r_RS # Reverse rate R - S, can also be considered as disease reocurrence rate
)
sd_saved=((sum(sd_nm[,3]+sd_nm[,8])) - (sum(sd_ss[,3]+sd_ss[,8])))/N
sd_saved_CI=sqrt((sum(sqrt(sd_nm[,11]^2+sd_nm[,16]^2))/T_max)^2 + (sum(sqrt(sd_ss[,11]^2+sd_ss[,16]^2))/T_max)^2)
sickday_ro <- rbind(sickday_ro, c(Ro,sd_saved,sd_saved_CI))
print(c('Current Ro: ',Ro, 'Current TP: ', TP))
}}
ro_sickd = sickday_ro
num_sim = 21
indicator <- c(rep("TP = 75%", num_sim ), rep("TP = 85%", num_sim ), rep("TP = 95%", num_sim ))
ro_sickd <- data.frame(ro_sickd, Legend=indicator)
colnames(ro_sickd)=c('Ro', 'Saved', 'CI', 'Legend')
p_Ro <-  ggplot(ro_sickd,
aes(x=Ro, y=Saved, group=Legend)) +
geom_ribbon(aes(ymin=(Saved-CI), ymax=(Saved+CI)), alpha=0.2, fill='#657b83')+
ggtitle("") +
geom_line(aes(colour = Legend), size=2) +
labs(x = "Ro Value", y = "Total Sick Days Saved (w/ - wo/) per Person") +
geom_hline(yintercept=0, color="grey", linetype="dashed") +
theme_solarized_2(light=FALSE) +
scale_colour_solarized('blue')
print(p_Ro)
# Changing Ro
########################################################
sickday_ro=data.frame()
for (TP in c(75, 85, 95)){
# Currently Setting TN=TP
TN = TP
for (Ro in seq(0, 20)*0.15+0.3) {
sd_nm=runMean(
T_max, # Total time (days)
N, # total number of people
FALSE, # If using sickstick (TRUE or FALSE)
TP, # TP of SickStick
TN, # TN of SickStick
Ro, # r0 value for disease of interest
gamma, # Recovery rate
sigma, # incubation rate
r_Q, # Sympotom-based self quarantine rate
r_RS # Reverse rate R - S, can also be considered as disease reocurrence rate
)
sd_ss=runMean(
T_max, # Total time (days)
N, # total number of people
TRUE, # If using sickstick (TRUE or FALSE)
TP, # TP of SickStick
TN, # TN of SickStick
Ro, # r0 value for disease of interest
gamma, # Recovery rate
sigma, # incubation rate
r_Q, # Sympotom-based self quarantine rate
r_RS # Reverse rate R - S, can also be considered as disease reocurrence rate
)
sd_saved=((sum(sd_nm[,3]+sd_nm[,8])) - (sum(sd_ss[,3]+sd_ss[,8])))/N
sd_saved_CI=sqrt((sum(sqrt(sd_nm[,11]^2+sd_nm[,16]^2))/T_max)^2 + (sum(sqrt(sd_ss[,11]^2+sd_ss[,16]^2))/T_max)^2)
sickday_ro <- rbind(sickday_ro, c(Ro,sd_saved,sd_saved_CI))
print(c('Current Ro: ',Ro, 'Current TP: ', TP))
}}
ro_sickd = sickday_ro
num_sim = 21
indicator <- c(rep("TP = 75%", num_sim ), rep("TP = 85%", num_sim ), rep("TP = 95%", num_sim ))
ro_sickd <- data.frame(ro_sickd, Legend=indicator)
colnames(ro_sickd)=c('Ro', 'Saved', 'CI', 'Legend')
p_Ro <-  ggplot(ro_sickd,
aes(x=Ro, y=Saved, group=Legend)) +
geom_ribbon(aes(ymin=(Saved-CI), ymax=(Saved+CI)), alpha=0.2, fill='#657b83')+
ggtitle("") +
geom_line(aes(colour = Legend), size=2) +
labs(x = "Ro Value", y = "Total Sick Days Saved (w/ - wo/) per Person") +
geom_hline(yintercept=0, color="grey", linetype="dashed") +
theme_solarized_2(light=FALSE) +
scale_colour_solarized('blue')
print(p_Ro)
runApp()
