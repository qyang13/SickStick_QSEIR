TN/100, # TN of SickStick X/100
0.5, # Infection rate X/100
0.1, # Recovery rate
0.05, # Disease progression rate
1, # Number of days remained quarantined before clear X
oc, # Reverse rate R - S, can also be considered as disease reocurrence rate X/100,
1,
0,
0 )
# mu <- 0.01
# gamma <- 0.1
# sigma <- 1
sickday_ro <- rbind(sickday_ro, c(oc, (sick_day_nm-sick_day_ss)))
print(c('Current Ro: ',ro, 'Current TP: ', TP))
}}
Ro=plot(sickday_ro, "Disease reoccurance rate")
sickday_ro=data.frame()
for (TP in c(75, 85, 95)){
# Currently Setting TN=TP
TN = TP
for (pct in (seq(1, 100)*0.01)) {
sick_day_nm=processData(
0, # TP of SickStick X/100
1, # TN of SickStick X/100
0.5, # Infection rate X/100
0.1, # Recovery rate
0.05, # Disease progression rate
0, # Number of days remained quarantined before clear X
0.2, # Reverse rate R - S, can also be considered as disease reocurrence rate X/100,
3,
0,
pct)
sick_day_ss=processData(
TP/100, # TP of SickStick X/100
TN/100, # TN of SickStick X/100
0.5, # Infection rate X/100
0.1, # Recovery rate
0.05, # Disease progression rate
1, # Number of days remained quarantined before clear X
0.2, # Reverse rate R - S, can also be considered as disease reocurrence rate X/100,
3,
0,
pct )
# mu <- 0.01
# gamma <- 0.1
# sigma <- 1
sickday_ro <- rbind(sickday_ro, c(pct, (sick_day_nm-sick_day_ss)))
print(c('Current Ro: ',ro, 'Current TP: ', TP))
}}
Ro=plot(sickday_ro, "Percentage population use SickStick")
sickday_ro=data.frame()
for (TP in c(75, 85, 95)){
# Currently Setting TN=TP
TN = TP
for (pct in (seq(1, 100)*0.01)) {
for (beta in (seq(1,100)*0.1)){
sick_day_nm=processData(
0, # TP of SickStick X/100
1, # TN of SickStick X/100
beta, # Infection rate X/100
0.1, # Recovery rate
0.05, # Disease progression rate
0, # Number of days remained quarantined before clear X
0.2, # Reverse rate R - S, can also be considered as disease reocurrence rate X/100,
3,
0,
pct)
sick_day_ss=processData(
TP/100, # TP of SickStick X/100
TN/100, # TN of SickStick X/100
beta, # Infection rate X/100
0.1, # Recovery rate
0.05, # Disease progression rate
1, # Number of days remained quarantined before clear X
0.2, # Reverse rate R - S, can also be considered as disease reocurrence rate X/100,
3,
0,
pct )
# mu <- 0.01
# gamma <- 0.1
# sigma <- 1
ro=beta/0.05
sickday_ro <- rbind(sickday_ro, c(ro, pct, (sick_day_nm-sick_day_ss)))
}}}
sickday_ro=data.frame()
for (TP in c(75, 85, 95)){
# Currently Setting TN=TP
TN = TP
for (pct in (seq(1, 100)*0.01)) {
for (beta in (seq(1,10)*0.1)){
sick_day_nm=processData(
0, # TP of SickStick X/100
1, # TN of SickStick X/100
beta, # Infection rate X/100
0.1, # Recovery rate
0.05, # Disease progression rate
0, # Number of days remained quarantined before clear X
0.2, # Reverse rate R - S, can also be considered as disease reocurrence rate X/100,
3,
0,
pct)
sick_day_ss=processData(
TP/100, # TP of SickStick X/100
TN/100, # TN of SickStick X/100
beta, # Infection rate X/100
0.1, # Recovery rate
0.05, # Disease progression rate
1, # Number of days remained quarantined before clear X
0.2, # Reverse rate R - S, can also be considered as disease reocurrence rate X/100,
3,
0,
pct )
# mu <- 0.01
# gamma <- 0.1
# sigma <- 1
ro=beta/0.05
sickday_ro <- rbind(sickday_ro, c(ro, pct, (sick_day_nm-sick_day_ss)))
}}}
View(sickday_ro)
colnames(sickday_ro) <- c("ro","percent", "DaysSaved")
p <- plot_ly(sickday_ro, x = ~ro, y = ~percent, z = ~DaysSaved, color = ~am, colors = c('#BF382A', '#0C4B8E'))
library(plotly)
p <- plot_ly(sickday_ro, x = ~ro, y = ~percent, z = ~DaysSaved, color = ~am, colors = c('#BF382A', '#0C4B8E'))
p <- plot_ly(sickday_ro, x = ~ro, y = ~percent, z = ~DaysSaved, color = ~am, colors = c('#BF382A', '#0C4B8E')) %>%
add_markers() %>%
layout(scene = list(xaxis = list(title = 'Ro Value'),
yaxis = list(title = 'Percentage '),
zaxis = list(title = '1/4 mile time')))
p
View(sickday_ro)
sickday_ro=data.frame()
for (TP in c(75, 85, 95)){
# Currently Setting TN=TP
TN = TP
for (pct in (seq(1, 100)*0.01)) {
for (beta in (seq(1,10)*0.1)){
sick_day_nm=processData(
0, # TP of SickStick X/100
1, # TN of SickStick X/100
beta, # Infection rate X/100
0.1, # Recovery rate
0.05, # Disease progression rate
0, # Number of days remained quarantined before clear X
0.2, # Reverse rate R - S, can also be considered as disease reocurrence rate X/100,
3,
0,
pct)
sick_day_ss=processData(
TP/100, # TP of SickStick X/100
TN/100, # TN of SickStick X/100
beta, # Infection rate X/100
0.1, # Recovery rate
0.05, # Disease progression rate
1, # Number of days remained quarantined before clear X
0.2, # Reverse rate R - S, can also be considered as disease reocurrence rate X/100,
3,
0,
pct )
# mu <- 0.01
# gamma <- 0.1
# sigma <- 1
ro=beta/0.05
sickday_ro <- rbind(sickday_ro, c(ro, pct, (sick_day_nm-sick_day_ss), tp))
}}}
sickday_ro=data.frame()
for (TP in c(75, 85, 95)){
# Currently Setting TN=TP
TN = TP
for (pct in (seq(1, 100)*0.01)) {
for (beta in (seq(1,10)*0.1)){
sick_day_nm=processData(
0, # TP of SickStick X/100
1, # TN of SickStick X/100
beta, # Infection rate X/100
0.1, # Recovery rate
0.05, # Disease progression rate
0, # Number of days remained quarantined before clear X
0.2, # Reverse rate R - S, can also be considered as disease reocurrence rate X/100,
3,
0,
pct)
sick_day_ss=processData(
TP/100, # TP of SickStick X/100
TN/100, # TN of SickStick X/100
beta, # Infection rate X/100
0.1, # Recovery rate
0.05, # Disease progression rate
1, # Number of days remained quarantined before clear X
0.2, # Reverse rate R - S, can also be considered as disease reocurrence rate X/100,
3,
0,
pct )
# mu <- 0.01
# gamma <- 0.1
# sigma <- 1
ro=beta/0.05
sickday_ro <- rbind(sickday_ro, c(ro, pct, (sick_day_nm-sick_day_ss)))
}}}
num_sim = nrow(sickday_ro)/3
indicator <- c(rep("TP = 75%", num_sim ), rep("TP = 85%", num_sim ), rep("TP = 95%", num_sim ))
sickday_ro <- data.frame(sickday_ro, Legend=indicator)
colnames(sickday_ro) <- c("ro","percent", "DaysSaved",'tp')
p <- plot_ly(sickday_ro, x = ~ro, y = ~percent, z = ~DaysSaved, color = ~tp, colors = c('#BF382A', '#0C4B8E')) %>%
add_markers() %>%
layout(scene = list(xaxis = list(title = 'Ro Value'),
yaxis = list(title = 'Percentage '),
zaxis = list(title = '1/4 mile time')))
p
colnames(sickday_ro) <- c("ro","percent", "DaysSaved",'tp')
p <- plot_ly(sickday_ro, x = ~ro, y = ~percent, z = ~DaysSaved, color = ~tp, colors = c('#BF382A', '#0C4B8E')) %>%
add_markers() %>%
layout(scene = list(xaxis = list(title = 'Ro Value'),
yaxis = list(title = 'Percentage '),
zaxis = list(title = 'Days Saved per person each year')))
p
sickday_ro$percent=sickday_ro$percent*100
p <- plot_ly(sickday_ro, x = ~ro, y = ~percent, z = ~DaysSaved, color = ~tp, colors = c('#BF382A', '#0C4B8E')) %>%
add_markers() %>%
layout(scene = list(xaxis = list(title = 'Ro Value'),
yaxis = list(title = 'Percentage People Using SickStick (%)'),
zaxis = list(title = 'Days Saved per person each year')))
p
p <- plot_ly(sickday_ro, x = ~ro, y = ~percent, z = ~DaysSaved, color = ~tp, type = 'scatter3d', mode = 'lines', colors = c('#BF382A', '#0C4B8E')) %>%
add_markers() %>%
layout(scene = list(xaxis = list(title = 'Ro Value'),
yaxis = list(title = 'Percentage People Using SickStick (%)'),
zaxis = list(title = 'Days Saved per person each year')))
p
sickday_ro=data.frame()
for (TP in c(75, 85, 95)){
# Currently Setting TN=TP
TN = TP
for (pct in (seq(1, 100)*0.01)) {
for (beta in (seq(1,20)*0.05)){
sick_day_nm=processData(
0, # TP of SickStick X/100
1, # TN of SickStick X/100
beta, # Infection rate X/100
0.1, # Recovery rate
0.05, # Disease progression rate
0, # Number of days remained quarantined before clear X
0.2, # Reverse rate R - S, can also be considered as disease reocurrence rate X/100,
3,
0,
pct)
sick_day_ss=processData(
TP/100, # TP of SickStick X/100
TN/100, # TN of SickStick X/100
beta, # Infection rate X/100
0.1, # Recovery rate
0.05, # Disease progression rate
1, # Number of days remained quarantined before clear X
0.2, # Reverse rate R - S, can also be considered as disease reocurrence rate X/100,
3,
0,
pct )
# mu <- 0.01
# gamma <- 0.1
# sigma <- 1
ro=beta/0.05
sickday_ro <- rbind(sickday_ro, c(ro, pct, (sick_day_nm-sick_day_ss)))
}}}
num_sim = nrow(sickday_ro)/3
indicator <- c(rep("TP = 75%", num_sim ), rep("TP = 85%", num_sim ), rep("TP = 95%", num_sim ))
sickday_ro <- data.frame(sickday_ro, Legend=indicator)
colnames(sickday_ro) <- c("ro","percent", "DaysSaved",'tp')
sickday_ro$percent=sickday_ro$percent*100
p <- plot_ly(sickday_ro, x = ~ro, y = ~percent, z = ~DaysSaved, color = ~tp, colors = c('#BF382A', '#0C4B8E')) %>%
add_markers() %>%
layout(scene = list(xaxis = list(title = 'Ro Value'),
yaxis = list(title = 'Percentage People Using SickStick (%)'),
zaxis = list(title = 'Days Saved per person each year')))
p
p <- plot_ly(sickday_ro, x = ~ro, y = ~percent, z = ~DaysSaved, color = ~tp, colors = c('#BF382A', '#0C4B8E')) %>%
add_markers() %>%
layout(scene = list(xaxis = list(title = 'Ro Value'),
yaxis = list(title = 'Percentage People Using SickStick (%)'),
zaxis = list(title = 'Days Saved per person each year'))) %>%
plot_ly (type = 'surface' , x = c( 9, 8, 5, 1 ) , y = c( 1, 2, 4, 8 ) , z = c( 11, 8, 15, 3 ))
plot_ly (type = 'surface', x = c( 9, 8, 5, 1 ) , y = c( 1, 2, 4, 8 ) , z = c( 11, 8, 15, 3 ))
p <- plot_ly(sickday_ro, x = ~ro, y = ~percent, z = ~DaysSaved, color = ~tp, colors = c('#BF382A', '#0C4B8E'), alpha = 0.5) %>%
add_markers() %>%
layout(scene = list(xaxis = list(title = 'Ro Value'),
yaxis = list(title = 'Percentage People Using SickStick (%)'),
zaxis = list(title = 'Days Saved per person each year')))
p
p <- plot_ly(sickday_ro, x = ~ro, y = ~percent, z = ~DaysSaved, color = ~tp, alpha = 0.5) %>%
add_markers() %>%
layout(scene = list(xaxis = list(title = 'Ro Value'),
yaxis = list(title = 'Percentage People Using SickStick (%)'),
zaxis = list(title = 'Days Saved per person each year')))
p
p <- plot_ly(sickday_ro, x = ~ro, y = ~percent, z = ~DaysSaved, color = ~tp, colors = c('#BF382A', '#0C4B8E'), alpha = 0.5) %>%
add_surface() %>%
layout(scene = list(xaxis = list(title = 'Ro Value'),
yaxis = list(title = 'Percentage People Using SickStick (%)'),
zaxis = list(title = 'Days Saved per person each year')))
p
p <- plot_ly(sickday_ro, x = ~ro, y = ~percent, z = ~DaysSaved, color = ~tp, colors = c('#BF382A', '#0C4B8E')) %>%
add_markers() %>%
layout(scene = list(xaxis = list(title = 'Ro Value'),
yaxis = list(title = 'Percentage People Using SickStick (%)'),
zaxis = list(title = 'Days Saved per person each year')))
p
p <- plot_ly(sickday_ro, x = ~ro, y = ~percent, z = ~DaysSaved, color = ~tp, colors = c('#BF382A', '#0C4B8E'), alpha=0.9) %>%
add_markers() %>%
layout(scene = list(xaxis = list(title = 'Ro Value'),
yaxis = list(title = 'Percentage People Using SickStick (%)'),
zaxis = list(title = 'Days Saved per person each year')))
p
p <- plot_ly(sickday_ro, x = ~ro, y = ~percent, z = ~DaysSaved, color = ~tp, colors = c('#BF382A', '#0C4B8E'), alpha=0.8, size = 1) %>%
add_markers() %>%
layout(scene = list(xaxis = list(title = 'Ro Value'),
yaxis = list(title = 'Percentage People Using SickStick (%)'),
zaxis = list(title = 'Days Saved per person each year')))
p
p <- plot_ly(sickday_ro, x = ~ro, y = ~percent, z = ~DaysSaved, color = ~tp, colors = c('#BF382A', '#0C4B8E'), alpha=1, size = 1) %>%
add_markers() %>%
layout(scene = list(xaxis = list(title = 'Ro Value'),
yaxis = list(title = 'Percentage People Using SickStick (%)'),
zaxis = list(title = 'Days Saved per person each year')))
p
p <- plot_ly(sickday_ro, x = ~ro, y = ~percent, z = ~DaysSaved, color = ~tp, colors = c('lightblue', 'lightcoral', 'orange'), alpha=1, size = 1) %>%
add_markers() %>%
layout(scene = list(xaxis = list(title = 'Ro Value'),
yaxis = list(title = 'Percentage People Using SickStick (%)'),
zaxis = list(title = 'Days Saved per person each year')))
p
p <- plot_ly(sickday_ro, x = ~ro, y = ~percent, z = ~DaysSaved, color = ~tp, colors = c('lightblue', 'lightcoral', 'midnightblue'), alpha=1, size = 1) %>%
add_markers() %>%
layout(scene = list(xaxis = list(title = 'Ro Value'),
yaxis = list(title = 'Percentage People Using SickStick (%)'),
zaxis = list(title = 'Days Saved per person each year')))
p
p <- plot_ly(sickday_ro, x = ~ro, y = ~percent, z = ~DaysSaved, color = ~tp, colors = c('orange', 'lightcoral', 'midnightblue'), alpha=1, size = 1) %>%
add_markers() %>%
layout(scene = list(xaxis = list(title = 'Ro Value'),
yaxis = list(title = 'Percentage People Using SickStick (%)'),
zaxis = list(title = 'Days Saved per person each year')))
p
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?row
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?column
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?sidebarMenu
runApp()
runApp()
runApp()
?dashboardSidebar
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?tabItems
runApp()
runApp()
?box
?
actionButton
runApp()
?icon
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?box
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(shiny)
library(ggplot2)
library(shiny.semantic)
library(semantic.dashboard)
library(ggpubr)
library(DT)
source("helpers.R")
source("model_tab.R")
source("table_tab.R")
source("sidebar_config.R")
runApp()
rm(shinydashboard)
rm("shinydashboard")
remove.packages("shinydashboard", lib="~/Library/R/3.5/library")
runApp()
runApp()
library(shiny)
library(ggplot2)
library(shiny.semantic)
library(semantic.dashboard)
library(ggpubr)
library(DT)
source("helpers.R")
source("model_tab.R")
source("table_tab.R")
source("sidebar_config.R")
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
## app.R ##
library(shiny)
library(shinydashboard)
install.packages("shinydashboard")
install.packages("shinydashboard")
install.packages("shinydashboard")
require("shinydashboard")
library(shinydashboard)
library(shinydashboard)
install.packages("shinydashboard")
install.packages("shinydashboard")
install.packages("shinydashboard")
install.packages("shinydashboard")
install.packages("shinydashboard")
install.packages("shinydashboard")
install.packages("shinydashboard")
library(shinydashboard)
## app.R ##
library(shiny)
library(shinydashboard)
install.packages("shinydashboard")
install.packages("shinydashboard")
runApp('~/Desktop/shiny_test')
runApp('~/Desktop/shiny_test')
runApp('~/Desktop/shiny_test')
runApp('~/Desktop/shiny_test')
runApp('~/Desktop/shiny_test')
runApp('~/Desktop/shiny_test')
runApp()
library("semantic.dashboard", lib.loc="~/Library/R/3.5/library")
library("shiny.semantic", lib.loc="~/Library/R/3.5/library")
remove.packages("semantic.dashboard", lib="~/Library/R/3.5/library")
remove.packages("shiny.semantic", lib="~/Library/R/3.5/library")
runApp()
?box
?conditionalPanel
?icon
runApp()
shiny::runApp()
runApp()
?box
shiny::runApp()
runApp()
