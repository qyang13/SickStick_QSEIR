else if (current_pop[1,i] == QS) {
move <- rbern(1, TP)
if (move == 1) current_pop[1,i] = S
}
else if (current_pop[1,i] == QE) {
move <- rbern(1, FP)
if (move == 1) current_pop[1,i] = E
}
}
}
# Normal Disease Dynamics ###
# first compute if individual moves compartments, then move and update num days in compartment
# then compute overall number of people in each compartment
for (i in 1:N){
if (current_pop[1,i] == S){
rate <- 1 - (1 - beta)^(total_pop[t-1, I]/N - num_to_QI) # I needs to be current_pop - sickstick quarantine
move <- rbern(1, rate)
if (move == 1){
current_pop[1,i] = E
current_pop[2,i] = 1
}
}
else if (current_pop[1,i] == E){
prob_success <- pnorm(current_pop[2,i], T_incubate, 1) #TODO: update sd based on certain disease
move <- rbern(1, prob_success)
if (move == 1){
current_pop[1,i] = I
current_pop[2,i] = 1
} else current_pop[2,i] = current_pop[2,i] + 1
}
else if (current_pop[1,i] == I){
# first self-quarantine. Then recovery rate.
move <- rbern(1, r_Q)
if (move == 1){
current_pop[1,i] = QI
current_pop[2,i] = current_pop[2,i] + 1
} else {
prob_success <- pnorm(current_pop[2,i], T_recover, 1) #TODO: update sd based on certain disease
move <- rbern(1, prob_success)
if (move == 1){
current_pop[1,i] = R
current_pop[2,i] = 1
} else current_pop[2,i] = current_pop[2,i] + 1
}
}
else if (current_pop[1,i] == QE){
prob_success <- pnorm(current_pop[2,i], T_incubate, 1) #TODO: update sd based on certain disease
move <- rbern(1, prob_success)
if (move == 1){
current_pop[1,i] = QI
current_pop[2,i] = 1
} else current_pop[2,i] = current_pop[2,i] + 1
}
else if (current_pop[1,i] == QI){
prob_success <- pnorm(current_pop[2,i], T_recover, 1) #TODO: update sd based on certain disease
move <- rbern(1, prob_success)
if (move == 1){
current_pop[1,i] = R
current_pop[2,i] = 1
} else current_pop[2,i] = current_pop[2,i] + 1
}
}
count_states <- table(current_pop[1,])
total_pop[t, S] <- count_states["1"]
total_pop[t, E] <- count_states["2"]
total_pop[t, I] <- count_states["3"]
total_pop[t, R] <- count_states["4"]
total_pop[t, QS] <- count_states["5"]
total_pop[t, QE] <- count_states["6"]
total_pop[t, QI] <- count_states["7"]
total_pop[t, is.na(total_pop[t,])] <- 0
# move people from R back to S at the end of the timestep
for (i in 1:N) {
if (current_pop[1,i] == R){
current_pop[1,i] = S
current_pop[2,i] = 0
}
}
}
current_pop <- matrix(0L, nrow = 2, ncol = N)
rownames(current_pop) <- c("state", "num days in state")
total_pop <- matrix(0L, nrow = T_max, ncol = 7)
colnames(total_pop) <- c("S", "E", "I", "R", "QS", "QE", "QI")
# Set initial population in current_pop and total_pop
# KMB: 1% in I0 and 1% in E0, may need to change later
E0 <- round(N/100)
I0 <- round(N/100)
current_pop[1, 1:E0] <- E
current_pop[1, (E0+1):(E0+I0)] <- I
current_pop[1, -(1:(E0+I0))] <- S
count_states <- table(current_pop[1,])
total_pop[t, S] <- count_states["1"]
total_pop[t, E] <- count_states["2"]
total_pop[t, I] <- count_states["3"]
#### Simulation loop ####
for (t in 2:T_max) {
# SickStick Phase: ####
# first compute individuals who move with bernoulli distribution, then update compartments accordingly
num_to_QI = 0
if (SickStick == TRUE) {
for (i in 1:N){
if (current_pop[1,i] == S) {
move <- rbern(1, FP)
if (move == 1) current_pop[1,i] = QS
}
else if (current_pop[1,i] == E) {
move <- rbern(1, TP)
if (move == 1) current_pop[1,i] = QE
}
else if (current_pop[1,i] == I) {
move <- rbern(1, TP)
if (move == 1) {
current_pop[1,i] = QI
num_to_QI = num_to_QI + 1
}
}
else if (current_pop[1,i] == QS) {
move <- rbern(1, TP)
if (move == 1) current_pop[1,i] = S
}
else if (current_pop[1,i] == QE) {
move <- rbern(1, FP)
if (move == 1) current_pop[1,i] = E
}
}
}
# Normal Disease Dynamics ###
# first compute if individual moves compartments, then move and update num days in compartment
# then compute overall number of people in each compartment
for (i in 1:N){
if (current_pop[1,i] == S){
rate <- 1 - (1 - beta)^(total_pop[t-1, I]/N - num_to_QI) # I needs to be current_pop - sickstick quarantine
move <- rbern(1, rate)
if (move == 1){
current_pop[1,i] = E
current_pop[2,i] = 1
}
}
else if (current_pop[1,i] == E){
prob_success <- pnorm(current_pop[2,i], T_incubate, 1) #TODO: update sd based on certain disease
move <- rbern(1, prob_success)
if (move == 1){
current_pop[1,i] = I
current_pop[2,i] = 1
} else current_pop[2,i] = current_pop[2,i] + 1
}
else if (current_pop[1,i] == I){
# first self-quarantine. Then recovery rate.
move <- rbern(1, r_Q)
if (move == 1){
current_pop[1,i] = QI
current_pop[2,i] = current_pop[2,i] + 1
} else {
prob_success <- pnorm(current_pop[2,i], T_recover, 1) #TODO: update sd based on certain disease
move <- rbern(1, prob_success)
if (move == 1){
current_pop[1,i] = R
current_pop[2,i] = 1
} else current_pop[2,i] = current_pop[2,i] + 1
}
}
else if (current_pop[1,i] == QE){
prob_success <- pnorm(current_pop[2,i], T_incubate, 1) #TODO: update sd based on certain disease
move <- rbern(1, prob_success)
if (move == 1){
current_pop[1,i] = QI
current_pop[2,i] = 1
} else current_pop[2,i] = current_pop[2,i] + 1
}
else if (current_pop[1,i] == QI){
prob_success <- pnorm(current_pop[2,i], T_recover, 1) #TODO: update sd based on certain disease
move <- rbern(1, prob_success)
if (move == 1){
current_pop[1,i] = R
current_pop[2,i] = 1
} else current_pop[2,i] = current_pop[2,i] + 1
}
}
count_states <- table(current_pop[1,])
total_pop[t, S] <- count_states["1"]
total_pop[t, E] <- count_states["2"]
total_pop[t, I] <- count_states["3"]
total_pop[t, R] <- count_states["4"]
total_pop[t, QS] <- count_states["5"]
total_pop[t, QE] <- count_states["6"]
total_pop[t, QI] <- count_states["7"]
total_pop[t, is.na(total_pop[t,])] <- 0
# move people from R back to S at the end of the timestep
for (i in 1:N) {
if (current_pop[1,i] == R){
current_pop[1,i] = S
current_pop[2,i] = 0
}
}
}
rm(list = ls())
T_max = 100
N = 200
SickStick = TRUE
TP = 90
TN = 85
R0 = 1.5
# beta = 0.9 ##
gamma = 1/6
sigma = 1/2
r_Q = 0.3
r_RS = 1
#### Initialization ####
# Initialize variables
TP <- TP/100
TN <- TN/100
FN <- 1 - TP
FP <- 1 - TN
T_recover <- 1/gamma
T_incubate <- 1/sigma
beta = R0*gamma
t = 1
S <- 1
E <- 2
I <- 3
R <- 4
QS <- 5
QE <- 6
QI <- 7
current_pop <- matrix(0L, nrow = 2, ncol = N)
rownames(current_pop) <- c("state", "num days in state")
total_pop <- matrix(0L, nrow = T_max, ncol = 7)
colnames(total_pop) <- c("S", "E", "I", "R", "QS", "QE", "QI")
# Set initial population in current_pop and total_pop
# KMB: 1% in I0 and 1% in E0, may need to change later
E0 <- round(N/100)
I0 <- round(N/100)
current_pop[1, 1:E0] <- E
current_pop[1, (E0+1):(E0+I0)] <- I
current_pop[1, -(1:(E0+I0))] <- S
count_states <- table(current_pop[1,])
total_pop[t, S] <- count_states["1"]
total_pop[t, E] <- count_states["2"]
total_pop[t, I] <- count_states["3"]
#### Simulation loop ####
t = 2
# SickStick Phase: ####
# first compute individuals who move with bernoulli distribution, then update compartments accordingly
num_to_QI = 0
if (SickStick == TRUE) {
for (i in 1:N){
if (current_pop[1,i] == S) {
move <- rbern(1, FP)
if (move == 1) current_pop[1,i] = QS
}
else if (current_pop[1,i] == E) {
move <- rbern(1, TP)
if (move == 1) current_pop[1,i] = QE
}
else if (current_pop[1,i] == I) {
move <- rbern(1, TP)
if (move == 1) {
current_pop[1,i] = QI
num_to_QI = num_to_QI + 1
}
}
else if (current_pop[1,i] == QS) {
move <- rbern(1, TP)
if (move == 1) current_pop[1,i] = S
}
else if (current_pop[1,i] == QE) {
move <- rbern(1, FP)
if (move == 1) current_pop[1,i] = E
}
}
}
for (i in 1:N){
if (current_pop[1,i] == S){
rate <- 1 - (1 - beta)^(total_pop[t-1, I]/N - num_to_QI) # I needs to be current_pop - sickstick quarantine
move <- rbern(1, rate)
if (move == 1){
current_pop[1,i] = E
current_pop[2,i] = 1
}
}
else if (current_pop[1,i] == E){
prob_success <- pnorm(current_pop[2,i], T_incubate, 1) #TODO: update sd based on certain disease
move <- rbern(1, prob_success)
if (move == 1){
current_pop[1,i] = I
current_pop[2,i] = 1
} else current_pop[2,i] = current_pop[2,i] + 1
}
else if (current_pop[1,i] == I){
# first self-quarantine. Then recovery rate.
move <- rbern(1, r_Q)
if (move == 1){
current_pop[1,i] = QI
current_pop[2,i] = current_pop[2,i] + 1
} else {
prob_success <- pnorm(current_pop[2,i], T_recover, 1) #TODO: update sd based on certain disease
move <- rbern(1, prob_success)
if (move == 1){
current_pop[1,i] = R
current_pop[2,i] = 1
} else current_pop[2,i] = current_pop[2,i] + 1
}
}
else if (current_pop[1,i] == QE){
prob_success <- pnorm(current_pop[2,i], T_incubate, 1) #TODO: update sd based on certain disease
move <- rbern(1, prob_success)
if (move == 1){
current_pop[1,i] = QI
current_pop[2,i] = 1
} else current_pop[2,i] = current_pop[2,i] + 1
}
else if (current_pop[1,i] == QI){
prob_success <- pnorm(current_pop[2,i], T_recover, 1) #TODO: update sd based on certain disease
move <- rbern(1, prob_success)
if (move == 1){
current_pop[1,i] = R
current_pop[2,i] = 1
} else current_pop[2,i] = current_pop[2,i] + 1
}
}
rate <- 1 - (1 - beta)^(total_pop[t-1, I] - num_to_QI)/N # I needs to be current_pop - sickstick quarantine
move <- rbern(1, rate)
move <- rbern(1, rate)
move <- rbern(1, rate)
move <- rbern(1, rate)
move <- rbern(1, rate)
move <- rbern(1, rate)
move <- rbern(1, rate)
move <- rbern(1, rate)
move <- rbern(1, rate)
move <- rbern(1, rate)
total_pop[t-1, I]
num_to_QI
1-beta
1-(1-beta)
rate
rate <- 1 - (1 - beta)^((total_pop[t-1, I] - num_to_QI)/N) # I needs to be current_pop - sickstick quarantine
rate
move <- rbern(1, rate)
T_max = 100
N = 200
SickStick = TRUE
TP = 90
TN = 85
R0 = 1.5
# beta = 0.9 ##
gamma = 1/6
sigma = 1/2
r_Q = 0.3
r_RS = 1
#### Initialization ####
# Initialize variables
TP <- TP/100
TN <- TN/100
FN <- 1 - TP
FP <- 1 - TN
T_recover <- 1/gamma
T_incubate <- 1/sigma
beta = R0*gamma
t = 1
S <- 1
E <- 2
I <- 3
R <- 4
QS <- 5
QE <- 6
QI <- 7
current_pop <- matrix(0L, nrow = 2, ncol = N)
rownames(current_pop) <- c("state", "num days in state")
total_pop <- matrix(0L, nrow = T_max, ncol = 7)
colnames(total_pop) <- c("S", "E", "I", "R", "QS", "QE", "QI")
# Set initial population in current_pop and total_pop
# KMB: 1% in I0 and 1% in E0, may need to change later
E0 <- round(N/100)
I0 <- round(N/100)
current_pop[1, 1:E0] <- E
current_pop[1, (E0+1):(E0+I0)] <- I
current_pop[1, -(1:(E0+I0))] <- S
count_states <- table(current_pop[1,])
total_pop[t, S] <- count_states["1"]
total_pop[t, E] <- count_states["2"]
total_pop[t, I] <- count_states["3"]
for (t in 2:T_max) {
# SickStick Phase: ####
# first compute individuals who move with bernoulli distribution, then update compartments accordingly
num_to_QI = 0
if (SickStick == TRUE) {
for (i in 1:N){
if (current_pop[1,i] == S) {
move <- rbern(1, FP)
if (move == 1) current_pop[1,i] = QS
}
else if (current_pop[1,i] == E) {
move <- rbern(1, TP)
if (move == 1) current_pop[1,i] = QE
}
else if (current_pop[1,i] == I) {
move <- rbern(1, TP)
if (move == 1) {
current_pop[1,i] = QI
num_to_QI = num_to_QI + 1
}
}
else if (current_pop[1,i] == QS) {
move <- rbern(1, TP)
if (move == 1) current_pop[1,i] = S
}
else if (current_pop[1,i] == QE) {
move <- rbern(1, FP)
if (move == 1) current_pop[1,i] = E
}
}
}
# Normal Disease Dynamics ###
# first compute if individual moves compartments, then move and update num days in compartment
# then compute overall number of people in each compartment
for (i in 1:N){
if (current_pop[1,i] == S){
rate <- 1 - (1 - beta)^((total_pop[t-1, I] - num_to_QI)/N) # I needs to be current_pop - sickstick quarantine
move <- rbern(1, rate)
if (move == 1){
current_pop[1,i] = E
current_pop[2,i] = 1
}
}
else if (current_pop[1,i] == E){
prob_success <- pnorm(current_pop[2,i], T_incubate, 1) #TODO: update sd based on certain disease
move <- rbern(1, prob_success)
if (move == 1){
current_pop[1,i] = I
current_pop[2,i] = 1
} else current_pop[2,i] = current_pop[2,i] + 1
}
else if (current_pop[1,i] == I){
# first self-quarantine. Then recovery rate.
move <- rbern(1, r_Q)
if (move == 1){
current_pop[1,i] = QI
current_pop[2,i] = current_pop[2,i] + 1
} else {
prob_success <- pnorm(current_pop[2,i], T_recover, 1) #TODO: update sd based on certain disease
move <- rbern(1, prob_success)
if (move == 1){
current_pop[1,i] = R
current_pop[2,i] = 1
} else current_pop[2,i] = current_pop[2,i] + 1
}
}
else if (current_pop[1,i] == QE){
prob_success <- pnorm(current_pop[2,i], T_incubate, 1) #TODO: update sd based on certain disease
move <- rbern(1, prob_success)
if (move == 1){
current_pop[1,i] = QI
current_pop[2,i] = 1
} else current_pop[2,i] = current_pop[2,i] + 1
}
else if (current_pop[1,i] == QI){
prob_success <- pnorm(current_pop[2,i], T_recover, 1) #TODO: update sd based on certain disease
move <- rbern(1, prob_success)
if (move == 1){
current_pop[1,i] = R
current_pop[2,i] = 1
} else current_pop[2,i] = current_pop[2,i] + 1
}
}
count_states <- table(current_pop[1,])
total_pop[t, S] <- count_states["1"]
total_pop[t, E] <- count_states["2"]
total_pop[t, I] <- count_states["3"]
total_pop[t, R] <- count_states["4"]
total_pop[t, QS] <- count_states["5"]
total_pop[t, QE] <- count_states["6"]
total_pop[t, QI] <- count_states["7"]
total_pop[t, is.na(total_pop[t,])] <- 0
# move people from R back to S at the end of the timestep
for (i in 1:N) {
if (current_pop[1,i] == R){
current_pop[1,i] = S
current_pop[2,i] = 0
}
}
}
Q_tot <- total_pop[, "QS"] + total_pop[, "QE"] + total_pop[, "QI"]
total_pop.df <- as.data.frame(total_pop)
total_pop.df$Q_tot <- Q_tot
colnames(total_pop.df) <- c("Uninfected", "Exposed", "Infected", "Recovered","QS","QE","QI", "Total Quarantined")
plot(1:100, total_pop[, "S"],
type = "l", ylim=c(0, 200))
title(main = "Without SickStick", sub = )
lines(1:100, total_pop[, "I"], type = "l", col = "red")
lines(1:100, total_pop[, "E"], type = "l", col = "blue")
lines(1:100, total_pop[, "QI"], type = "l", col = "orange")
runApp('Sawyer Rotation/SickStick_QSEIR/SickStickModel')
shiny::runApp('Sawyer Rotation/SickStick_QSEIR/SickStickModel')
runApp('Sawyer Rotation/SickStick_QSEIR/SickStickModel')
shiny::runApp('Sawyer Rotation/SickStick_QSEIR/SickStickModel')
shiny::runApp('Sawyer Rotation/SickStick_QSEIR/SickStickModel')
runApp('Sawyer Rotation/SickStick_QSEIR/SickStickModel')
runApp('Sawyer Rotation/SickStick_QSEIR/SickStickModel')
runApp('Sawyer Rotation/SickStick_QSEIR/SickStickModel')
runApp('Sawyer Rotation/SickStick_QSEIR/SickStickModel')
runApp('Sawyer Rotation/SickStick_QSEIR/SickStickModel')
runApp('Sawyer Rotation/SickStick_QSEIR/SickStickModel')
runApp('Sawyer Rotation/SickStick_QSEIR/SickStickModel')
runApp('Sawyer Rotation/SickStick_QSEIR/SickStickModel')
runApp('Sawyer Rotation/SickStick_QSEIR/SickStickModel')
runApp('Sawyer Rotation/SickStick_QSEIR/SickStickModel')
runApp('Sawyer Rotation/SickStick_QSEIR/SickStickModel')
runApp('Sawyer Rotation/SickStick_QSEIR/SickStickModel')
shiny::runApp('Sawyer Rotation/SickStick_QSEIR/SickStickModel')
runApp('Sawyer Rotation/SickStick_QSEIR/SickStickModel')
runApp('Sawyer Rotation/SickStick_QSEIR/SickStickModel')
